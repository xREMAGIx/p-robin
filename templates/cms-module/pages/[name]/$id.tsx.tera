{% set pasCalCaseName = name | pascal_case %}
{% set camelCaseName = name | camel_case %}
{% set kebabCaseName = name | kebab_case %}
{% set snakeCaseName = name | snake_case %}

import { TOAST_SUCCESS_MESSAGE_CODE } from "@cms/config/constants";
import { InfoForm, {{pasCalCaseName}}InfoForm } from "@cms/containers/{{kebabCaseName}}/InfoForm";
import { {{camelCaseName}}DetailFetch, {{camelCaseName}}Update } from "@cms/services/{{kebabCaseName}}";
import { {{camelCaseName}}QueryKeys } from "@cms/utils/query";
import React, { useMemo, useState } from "react";
import { FormProvider, useForm } from "react-hook-form";
import toast from "react-hot-toast";
import { useTranslation } from "react-i18next";
import { useQuery } from "react-query";
import { Link, useParams } from "react-router-dom";

const {{pasCalCaseName}}Update: React.FunctionComponent = () => {
//* Hooks
const { id } = useParams<{ id: string }>();

    const { t } = useTranslation(["common", "{{kebabCaseName}}"]);

    //* States
    const [isUpdating, setIsUpdating] = useState(false);

    //* Hook-form
    const methods = useForm<{{pasCalCaseName}}InfoForm>();

        //* Queries
        const { isFetching: isLoading } = useQuery({
        queryKey: {{camelCaseName}}QueryKeys.detail(id ?? ""),
        queryFn: async () => {
        if (!id) return;
        const { data, error } = await {{camelCaseName}}DetailFetch({
        id,
        query: {},
        });

        if (error) {
        throw error.value;
        }

        const {{camelCaseName}} = data.data;

        methods.reset({
        name: {{camelCaseName}}.name,
        });

        return data.data;
        },
        });

        //* Function
        const handleUpdate = async (form: {{pasCalCaseName}}InfoForm) => {
        if (!id) return;
        setIsUpdating(true);
        const { data, error } = await {{camelCaseName}}Update({
        id,
        ...form,
        });
        setIsUpdating(false);

        if (error) {
        const err = error.value.errors[0];
        toast.error(err.detail ?? err.title);
        return;
        }

        const {{camelCaseName}} = data.data;

        methods.reset({
        name: {{camelCaseName}}.name,
        });

        toast.success(t(TOAST_SUCCESS_MESSAGE_CODE.UPDATE));
        };

        //* Data
        const breadcrumbs = useMemo(() => {
        return [
        {
        href: "/",
        label: t("home", { ns: "common" }),
        },
        {
        href: "/{{kebabCaseName}}",
        label: t("{{snakeCaseName}}_title", { ns: "{{kebabCaseName}}" }),
        },
        {
        href: "/{{kebabCaseName}}/update",
        label: t("{{snakeCaseName}}_update", { ns: "{{kebabCaseName}}" }),
        },
        ];
        }, [t]);

        if (isLoading)
        return (
        <>
            <div className="skeleton h-80 w-full"></div>
        </>
        );

        return (
        <div className="p-{{camelCaseName}}Update mb-6">
            <div className="breadcrumbs text-sm">
                <ul>
                    {breadcrumbs.map((ele, idx) => (
                    <li key={`breadcrumb-${idx}`}>
                        <Link to={ele.href}>{ele.label}</Link>
                    </li>
                    ))}
                </ul>
            </div>
            <div className="mt-4 flex justify-between items-center gap-1">
                <p className="font-bold text-lg capitalize">
                    {t("update_{{snakeCaseName}}", { ns: "{{kebabCaseName}}" })}
                </p>
                <button disabled={isUpdating} className="btn btn-primary capitalize" onClick={()=>
                    methods.handleSubmit(handleUpdate)()}
                    >
                    {t("update")}
                </button>
            </div>
            <div className="mt-4">
                <FormProvider {...methods}>
                    <InfoForm />
                </FormProvider>
            </div>
        </div>
        );
        };

        export default {{pasCalCaseName}}Update;