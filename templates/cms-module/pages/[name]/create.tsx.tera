{% set pasCalCaseName = name | pascal_case %}
{% set camelCaseName = name | camel_case %}
{% set kebabCaseName = name | kebab_case %}
{% set snakeCaseName = name | snake_case %}

import { TOAST_SUCCESS_MESSAGE_CODE } from "@cms/config/constants";
import { InfoForm, {{pasCalCaseName}}InfoForm } from "@cms/containers/{{kebabCaseName}}/InfoForm";
import { {{camelCaseName}}Create } from "@cms/services/{{kebabCaseName}}";
import React, { useMemo, useState } from "react";
import { FormProvider, useForm } from "react-hook-form";
import toast from "react-hot-toast";
import { useTranslation } from "react-i18next";
import { Link } from "react-router-dom";

const {{pasCalCaseName}}Create: React.FunctionComponent = () => {
//* Hooks
const { t } = useTranslation(["common", "{{kebabCaseName}}"]);

//* States
const [isCreating, setIsCreating] = useState(false);

//* Hook-form
const methods = useForm<{{pasCalCaseName}}InfoForm>();

    //* Function
    const handleCreate = async (form: {{pasCalCaseName}}InfoForm) => {
    setIsCreating(true);
    const { error } = await {{camelCaseName}}Create({
    ...form,
    });
    setIsCreating(false);

    if (error) {
    const err = error.value.errors[0];
    toast.error(err.detail ?? err.title);
    return;
    }

    methods.reset();
    toast.success(t(TOAST_SUCCESS_MESSAGE_CODE.CREATE));
    };

    //* Data
    const breadcrumbs = useMemo(() => {
    return [
    {
    href: "/",
    label: t("home", { ns: "common" }),
    },
    {
    href: "/{{kebabCaseName}}",
    label: t("{{snakeCaseName}}_title", { ns: "{{kebabCaseName}}" }),
    },
    {
    href: "/{{kebabCaseName}}/create",
    label: t("{{snakeCaseName}}_create", { ns: "{{kebabCaseName}}" }),
    },
    ];
    }, [t]);

    return (
    <div className="p-{{camelCaseName}}Create mb-6">
        <div className="breadcrumbs text-sm">
            <ul>
                {breadcrumbs.map((ele, idx) => (
                <li key={`breadcrumb-${idx}`}>
                    <Link to={ele.href}>{ele.label}</Link>
                </li>
                ))}
            </ul>
        </div>
        <div className="mt-4 flex justify-between items-center gap-1">
            <p className="font-bold text-lg capitalize">
                {t("create_{{snakeCaseName}}", { ns: "{{kebabCaseName}}" })}
            </p>
            <button disabled={isCreating} className="btn btn-primary capitalize" onClick={ ()=>
                methods.handleSubmit(handleCreate)()}
                >
                {t("create")}
            </button>
        </div>
        <div className="mt-4">
            <FormProvider {...methods}>
                <InfoForm />
            </FormProvider>
        </div>
    </div>
    );
    };

    export default {{pasCalCaseName}}Create;