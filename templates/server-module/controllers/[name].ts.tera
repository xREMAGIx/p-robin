{% set pasCalCaseName = name | pascal_case %}
{% set camelCaseName = name | camel_case %}
{% set kebabCaseName = name | kebab_case %}

import { Elysia } from "elysia";
import { ERROR_CODES } from "../config/enums";
import { apiErrorSchema } from "../models/base";
import {
{{pasCalCaseName}}Data,
create{{pasCalCaseName}}ParamSchema,
delete{{pasCalCaseName}}DataSchema,
detail{{pasCalCaseName}}DataSchema,
list{{pasCalCaseName}}OffsetPaginationDataSchema,
list{{pasCalCaseName}}PagePaginationDataSchema,
list{{pasCalCaseName}}QuerySchema,
multipleDelete{{pasCalCaseName}}DataSchema,
multipleDelete{{pasCalCaseName}}ParamSchema,
{{camelCaseName}}Model,
update{{pasCalCaseName}}ParamSchema,
} from "../models/{{kebabCaseName}}";
import { ApiError } from "../utils/errors";
import {
authenticatePlugin,
idValidatePlugin,
servicesPlugin,
} from "../utils/plugins";

export const {{camelCaseName}}Routes = new Elysia({
name: "{{kebabCaseName}}-controller",
}).group(
`api/{{kebabCaseName}}s`,
{
detail: {
tags: ["{{pasCalCaseName}}"],
},
},
(app) =>
app
.use(servicesPlugin)
.use({{camelCaseName}}Model)
//* List
.get(
"/page-pagination",
async ({
query: {
sortBy: sortByParams,
sortOrder = "desc",
limit = 10,
page = 1,
...rest
},
{{camelCaseName}}Service,
}) => {
const sortBy = sortByParams as keyof {{pasCalCaseName}}Data;
const sortByList: (keyof {{pasCalCaseName}}Data)[] = [
"name",
"createdAt",
"updatedAt",
];
if (sortBy && !sortByList.includes(sortBy)) {
throw new ApiError({
status: "422",
errorCode: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_BY,
title: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_BY,
messageCode: "invalid_sort_by",
});
}

if (sortOrder !== "asc" && sortOrder !== "desc") {
throw new ApiError({
status: "422",
errorCode: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_ORDER,
title: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_ORDER,
messageCode: "invalid_sort_order",
});
}

const res = await {{camelCaseName}}Service.getListPagePagination({
sortBy: sortBy,
sortOrder: sortOrder,
limit: Number(limit),
page: Number(page),
...rest,
});

return {
data: res.{{camelCaseName}}s,
meta: res.meta,
};
},
{
query: list{{pasCalCaseName}}QuerySchema,
response: {
200: list{{pasCalCaseName}}PagePaginationDataSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Get {{pasCalCaseName}} List (page pagination)",
},
}
)
.get(
"/offset-pagination",
async ({
query: {
sortBy: sortByParams,
sortOrder = "desc",
limit = 10,
offset = 0,
...rest
},
{{camelCaseName}}Service,
}) => {
const sortBy = sortByParams as keyof {{pasCalCaseName}}Data;
const sortByList: (keyof {{pasCalCaseName}}Data)[] = [
"name",
"createdAt",
"updatedAt",
];
if (sortBy && !sortByList.includes(sortBy)) {
throw new ApiError({
status: "422",
errorCode: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_BY,
title: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_BY,
messageCode: "invalid_sort_by",
});
}

if (sortOrder !== "asc" && sortOrder !== "desc") {
throw new ApiError({
status: "422",
errorCode: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_ORDER,
title: ERROR_CODES.VALIDATE_ERROR_INVALID_SORT_ORDER,
messageCode: "invalid_sort_order",
});
}

const res = await {{camelCaseName}}Service.getListOffsetPagination({
sortBy: sortBy,
sortOrder: sortOrder,
limit: Number(limit),
offset: Number(offset),
...rest,
});

return {
data: res.{{camelCaseName}}s,
meta: res.meta,
};
},
{
query: list{{pasCalCaseName}}QuerySchema,
response: {
200: list{{pasCalCaseName}}OffsetPaginationDataSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Get {{pasCalCaseName}} List (offset pagination)",
},
}
)
//* Get detail
.guard((innerApp) =>
innerApp.use(idValidatePlugin).get(
"/:id",
async ({ idParams, {{camelCaseName}}Service }) => {
const data = await {{camelCaseName}}Service.getDetail({ id: idParams });

if (!data) {
throw new ApiError({
status: "404",
errorCode: ERROR_CODES.NOT_FOUND_DATA,
title: ERROR_CODES.NOT_FOUND_DATA,
messageCode: "not_found_data",
});
}

return {
data,
};
},
{
response: {
200: detail{{pasCalCaseName}}DataSchema,
401: apiErrorSchema,
404: apiErrorSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Get {{pasCalCaseName}} Detail",
},
}
)
)
//* Create
.guard((innerApp) =>
innerApp
.use(authenticatePlugin)
.post(
"/create",
async ({ body, userId, {{camelCaseName}}Service }) => {
const data = await {{camelCaseName}}Service.create({ ...body, userId });

return {
data: data,
};
},
{
body: create{{pasCalCaseName}}ParamSchema,
response: {
200: detail{{pasCalCaseName}}DataSchema,
401: apiErrorSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Create {{pasCalCaseName}}",
},
}
)
.delete(
"/multiple-delete",
async ({ body, {{camelCaseName}}Service }) => {
const data = await {{camelCaseName}}Service.multipleDelete({ ...body });

return {
data: data,
};
},
{
body: multipleDelete{{pasCalCaseName}}ParamSchema,
response: {
200: multipleDelete{{pasCalCaseName}}DataSchema,
401: apiErrorSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Multiple Delete {{pasCalCaseName}}",
},
}
)
.use(idValidatePlugin)
//* Update
.put(
"/:id",
async ({ idParams, body, userId, {{camelCaseName}}Service }) => {
const data = await {{camelCaseName}}Service.update({
...body,
userId,
id: idParams,
});

return {
data,
};
},
{
body: update{{pasCalCaseName}}ParamSchema,
response: {
200: detail{{pasCalCaseName}}DataSchema,
401: apiErrorSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Update {{pasCalCaseName}}",
},
}
)
//* Delete
.delete(
"/:id",
async ({ idParams, {{camelCaseName}}Service }) => {
const res = await {{camelCaseName}}Service.delete({ id: idParams });

return { data: res };
},
{
response: {
200: delete{{pasCalCaseName}}DataSchema,
401: apiErrorSchema,
422: apiErrorSchema,
500: apiErrorSchema,
},
detail: {
summary: "Delete {{pasCalCaseName}}",
},
}
)
)
);